package com.maf.hotels;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.maf.hotels.model.AvailableHotelsData;
import com.maf.hotels.model.BestHotels;
import com.maf.hotels.model.CrazyHotels;
import com.maf.hotels.service.AvailableHotelsService;

/**
 * Servlet implementation class AvailableHotels
 */
@WebServlet("/AvailableHotels")
public class AvailableHotels extends HttpServlet {
	private static final long serialVersionUID = 1L;

    /**
     * Default constructor. 
     */
    public AvailableHotels() {
    	
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		response.getWriter().append("Served at: ").append(request.getContextPath());
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("AvailableHotels.doPost()");
		AvailableHotelsService service  = new  AvailableHotelsService();
		List<BestHotels> bestHotelsList = service.sendBestHotelsRequest(request);
		List<CrazyHotels> crazyHotelsList = service.sendCrazyHotelsRequest(request);
		
		//  Create a list to be returned, and gather all the data from the providers
		List<AvailableHotelsData> availableHotelsDataList = new ArrayList<AvailableHotelsData>();
		AvailableHotelsData availableHotelsData = null;
		
		for(BestHotels bestHotels : bestHotelsList) {
			availableHotelsData = new AvailableHotelsData();
			availableHotelsData.setHotelFare(bestHotels.getHotelFare());
			availableHotelsData.setHotelName(bestHotels.getHotelName());
			availableHotelsData.setProvider("Best Hotels");
			availableHotelsData.setRoomAmenities(bestHotels.getRoomAmenities());
			availableHotelsData.setRate(bestHotels.getHotelRate());
			
			availableHotelsDataList.add(availableHotelsData);
		}
		
		for(CrazyHotels crazyHotels : crazyHotelsList) {
			availableHotelsData = new AvailableHotelsData();
			availableHotelsData.setHotelFare(crazyHotels.getPrice());
			availableHotelsData.setHotelName(crazyHotels.getHotelName());
			availableHotelsData.setProvider("Best Hotels");
			availableHotelsData.setRoomAmenities(crazyHotels.getRoomAmenities());
			availableHotelsData.setRate(crazyHotels.getRate().length());
			
			availableHotelsDataList.add(availableHotelsData);
		}
		
		// Send the response as json format
		PrintWriter out = response.getWriter();
		response.setContentType("application/json");
		response.setCharacterEncoding("UTF-8");
		out.print(bestHotelsList);
		out.print(crazyHotelsList);
		out.flush();
	}
	
	/**
	 * This method used to convert list to json string
	 * @param <T>
	 * @param list
	 * @return json string
	 * @throws IOException
	 */
	public <T> String convertListToJsonArray(List<T> list) throws IOException {  

	    final ByteArrayOutputStream out = new ByteArrayOutputStream();
	    final ObjectMapper mapper = new ObjectMapper();

	    mapper.writeValue(out, list);

	    final byte[] data = out.toByteArray();
	    return new String(data);
	}
}
